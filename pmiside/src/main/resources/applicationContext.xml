<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- scans the classpath for annotated components (including @Repostory and @Service that will be auto-registered as Spring 
		beans -->
	<context:component-scan base-package="com.yxtec.pmiside" />

	<!-- methods or classes needing to run in a complete transaction will be annotated with Transactional -->
	<tx:annotation-driven />

	<!-- This will ensure that hibernate or jpa exceptions are automatically translated into Spring's generic DataAccessException 
		hierarchy for those classes annotated with Repository For example see PersonDaoJpa -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- JPA Entity Manager Factory -->
	<!-- <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean"> <property name="persistenceUnitName" 
		value="pmisaddonsPU" /> </bean> -->


	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="persistenceXmlLocation" value="classpath:persistence.xml" />
		<property name="persistenceUnitName" value="pmisaddonsPU" />
		<property name="persistenceProvider">
			<bean id="persistenceProvider" class="org.apache.openjpa.persistence.PersistenceProviderImpl" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaDialect" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="openjpa.ClassLoadEnhancement">false</prop>
				<prop key="openjpa.DynamicEnhancementAgent">false</prop>
				<prop key="openjpa.RuntimeUnenhancedClasses">supported</prop>
				<prop key="openjpa.Log">SQL=TRACE,Runtime=INFO</prop>
				<prop key="openjpa.jdbc.SynchronizeMappings">buildSchema(ForeignKeys=true)</prop>
			</props>
		</property>
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/pmisaddons" />
		<property name="username" value="dev" />
		<property name="password" value="123456" />
	</bean>

	<!-- bean post-processor for JPA annotations -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Transaction Config -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory" />

	<!-- use declarative transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:aspectj-autoproxy />

</beans>